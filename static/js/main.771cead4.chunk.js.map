{"version":3,"sources":["components/Token.js","blots/TokenBlot.js","components/Editor.js","App.js","index.js"],"names":["Token","title","slug","id","className","draggable","onDragStart","event","text","json","JSON","stringify","dataTransfer","setData","TokenBlot","this","value","node","textContent","dataset","Quill","import","blotName","tagName","register","CONFIG","formats","modules","toolbar","theme","Editor","onChange","useState","editor","setEditor","ref","container","innerHTML","quill","on","html","dom","DOMParser","parseFromString","querySelectorAll","forEach","token","replaceWith","body","onValueChange","root","onDrop","tokenData","getData","preventDefault","document","caretRangeFromPoint","selection","getSelection","range","clientX","clientY","setBaseAndExtent","startContainer","startOffset","index","getLength","insertEmbed","parse","insertText","setSelection","style","height","App","setHtml","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.771cead4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Token = ({ title, slug, id }) => {\n  const onDragStart = event => {\n    const text = `{{${slug}|${id}}}`;\n    const json = JSON.stringify({ title, slug, id });\n    event.dataTransfer.setData(\"text/plain\", text);\n    event.dataTransfer.setData(\"application/vnd.placeholder.token\", json);\n  };\n  return (\n    <span className=\"token\" draggable=\"true\" onDragStart={onDragStart}>\n      {title}\n    </span>\n  );\n};\n\nexport default Token;\n","import Quill from \"quill\";\n\nconst Embed = Quill.import(\"blots/embed\");\n\nclass TokenBlot extends Embed {\n  static blotName = \"placeholder-token\";\n  static tagName = \"span\";\n  static className = \"token\";\n\n  static create({ title, slug, id }) {\n    let node = super.create();\n    node.textContent = title;\n    node.dataset.title = title;\n    node.dataset.slug = slug;\n    node.dataset.id = id;\n    return node;\n  }\n\n  static value(node) {\n    return node.dataset;\n  }\n\n  html() {\n    const { slug, id } = this.value();\n    return `{{${slug}|${id}}}`;\n  }\n\n  length() {\n    return 1;\n  }\n}\n\nexport default TokenBlot;\n","import React, { useState } from \"react\";\nimport Quill from \"quill\";\nimport TokenBlot from \"../blots/TokenBlot\";\nimport \"quill/dist/quill.snow.css\";\n\nQuill.register(TokenBlot);\n\nconst CONFIG = {\n  formats: [\"bold\", \"italic\", \"placeholder-token\"],\n  modules: {\n    toolbar: [[\"bold\", \"italic\"]]\n  },\n  theme: \"snow\"\n};\n\nconst Editor = ({ value, onChange }) => {\n  const [editor, setEditor] = useState(null);\n\n  // Replace the token nodes with placeholder syntax text.\n  // In a production app this should only be done once when submitting\n  // instead of after every text change.\n  const onValueChange = html => {\n    const parser = new DOMParser();\n    const dom = parser.parseFromString(html, \"text/html\");\n    dom.querySelectorAll(\".token\").forEach(token => {\n      const {\n        dataset: { id, slug }\n      } = token;\n      token.replaceWith(`{{${slug}|${id}}}`);\n    });\n    onChange(dom.body.innerHTML);\n  };\n\n  // When the containing div is mounted, initialize the Quill instance.\n  // Don't mount if an instance already exists!\n  const onMount = container => {\n    if (!editor && container) {\n      // Set the innerHTML once so that Quill is initialized with the starting value.\n      container.innerHTML = value;\n      const quill = new Quill(container, CONFIG);\n      quill.on(\"text-change\", () => onValueChange(quill.root.innerHTML));\n      setEditor(quill);\n    }\n  };\n\n  const onDrop = event => {\n    const tokenData = event.dataTransfer.getData(\n      \"application/vnd.placeholder.token\"\n    );\n\n    // If the dropped item is a placeholder token AND a Quill instance is initialized:\n    // - Call `preventDefault()` to prevent the token's raw text from being added to the editor.\n    // - Use the Quill API to add a token embed into the editor.\n    if (tokenData && editor) {\n      event.preventDefault();\n\n      // Get the index of the native insertion point.\n      // Drag events do not update Quill's selection so it must be calculated manually.\n      if (document.caretRangeFromPoint) {\n        const selection = document.getSelection();\n        const range = document.caretRangeFromPoint(\n          event.clientX,\n          event.clientY\n        );\n        if (selection && range) {\n          selection.setBaseAndExtent(\n            range.startContainer,\n            range.startOffset,\n            range.startContainer,\n            range.startOffset\n          );\n        }\n      }\n      const index = (editor.getSelection() || {}).index || editor.getLength();\n\n      // 1. Insert the placeholder token at the insertion point.\n      // 2. Then insert a space.\n      // 3. Update the insertion point to be after the token and space.\n      editor.insertEmbed(index, \"placeholder-token\", JSON.parse(tokenData));\n      editor.insertText(index + 1, \" \");\n      editor.setSelection(editor.getSelection().index + 2);\n    }\n  };\n\n  return <div ref={onMount} onDrop={onDrop} style={{ height: 200 }} />;\n};\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport Token from \"./components/Token\";\nimport Editor from \"./components/Editor\";\n\nfunction App() {\n  const [html, setHtml] = useState(\n    \"<p>The <strong>quick brown fox</strong> jumps over the <em>lazy dog</em>.</p>\"\n  );\n  return (\n    <div id=\"app\">\n      <aside>\n        <h1>Tokens</h1>\n        <ul className=\"token-list\">\n          <li>\n            <Token title=\"first name\" slug=\"first_name\" id=\"123\" />\n          </li>\n          <li>\n            <Token title=\"last name\" slug=\"last_name\" id=\"456\" />\n          </li>\n          <li>\n            <Token title=\"email address\" slug=\"email\" id=\"789\" />\n          </li>\n        </ul>\n      </aside>\n      <section>\n        <h1>Editor</h1>\n        <p>\n          Note: only <strong>bold</strong>, <strong>italic</strong>, and{\" \"}\n          <strong>tokens</strong> are enabled.\n        </p>\n        <Editor value={html} onChange={setHtml} />\n        <h1>Output</h1>\n        <div id=\"result\">{html}</div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}