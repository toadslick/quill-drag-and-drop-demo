{"version":3,"sources":["quill/TokenBlot.js","components/Token.js","quill/TokenDrop.js","components/Editor.js","App.js","index.js"],"names":["TokenBlot","title","slug","id","node","textContent","setAttribute","dataset","Quill","import","blotName","tagName","className","TAG","toLowerCase","Token","draggable","onDragStart","event","text","json","JSON","stringify","dataTransfer","setData","TokenDrop","quill","this","onDrop","bind","onClick","onSelectionChange","root","addEventListener","on","tokenData","getData","preventDefault","document","caretRangeFromPoint","selection","getSelection","range","clientX","clientY","setBaseAndExtent","startContainer","startOffset","index","getLength","insertEmbed","parse","insertText","setSelection","token","Parchment","find","target","offset","scroll","window","querySelectorAll","forEach","containsNode","classList","add","remove","CONFIG","formats","modules","toolbar","theme","Editor","value","onChange","useState","editor","setEditor","ref","container","innerHTML","html","dom","DOMParser","parseFromString","replaceWith","body","onValueChange","style","height","register","App","setHtml","ReactDOM","render","StrictMode","getElementById"],"mappings":"+RAIqBA,E,uKAoBjB,OAAO,K,iCAf2B,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,KAAMC,EAAM,EAANA,GACvBC,EAAI,qDAMR,OALAA,EAAKC,YAAcJ,EACnBG,EAAKE,aAAa,kBAAmB,SACrCF,EAAKG,QAAQN,MAAQA,EACrBG,EAAKG,QAAQL,KAAOA,EACpBE,EAAKG,QAAQJ,GAAKA,EACXC,I,4BAGIA,GACX,OAAOA,EAAKG,Y,GAlBFC,IAAMC,OAAO,gBAENT,EACZU,SAAW,oBADCV,EAEZW,QAAU,OAFEX,EAGZY,UAAY,QCJrB,IAAMC,EAAMb,EAAUW,QAAQG,cAqBfC,EAnBD,SAAC,GAAyB,IAAvBd,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,KAAMC,EAAS,EAATA,GAQ5B,OACE,kBAACU,EAAD,CACED,UAAWZ,EAAUY,UACrBI,UAAU,OACVC,YAXgB,SAAAC,GAClB,IAAMC,EAAI,YAAQjB,EAAR,YAAgBC,EAAhB,MACJiB,EAAOC,KAAKC,UAAU,CAAErB,QAAOC,OAAMC,OAC3Ce,EAAMK,aAAaC,QAAQ,aAAcL,GACzCD,EAAMK,aAAaC,QAAQ,oCAAqCJ,KAS7DnB,I,uBCbcwB,E,WACnB,WAAYC,GAAQ,oBAClBC,KAAKD,MAAQA,EACbC,KAAKC,OAASD,KAAKC,OAAOC,KAAKF,MAC/BA,KAAKG,QAAUH,KAAKG,QAAQD,KAAKF,MACjCA,KAAKI,kBAAoBJ,KAAKI,kBAAkBF,KAAKF,MACrDA,KAAKD,MAAMM,KAAKC,iBAAiB,OAAQN,KAAKC,QAAQ,GACtDD,KAAKD,MAAMM,KAAKC,iBAAiB,QAASN,KAAKG,SAAS,GACxDH,KAAKD,MAAMQ,GAAG,mBAAoBP,KAAKI,mB,mDAGlCb,GACL,IAAMQ,EAAQC,KAAKD,MACbS,EAAYjB,EAAMK,aAAaa,QACnC,qCAMF,GAAID,GAAaT,EAAO,CAMtB,GALAR,EAAMmB,iBAKFC,SAASC,oBAAqB,CAChC,IAAMC,EAAYF,SAASG,eACrBC,EAAQJ,SAASC,oBACrBrB,EAAMyB,QACNzB,EAAM0B,SAEJJ,GAAaE,GACfF,EAAUK,iBACRH,EAAMI,eACNJ,EAAMK,YACNL,EAAMI,eACNJ,EAAMK,aAIZ,IAAMC,GAAStB,EAAMe,gBAAkB,IAAIO,OAAStB,EAAMuB,YAK1DvB,EAAMwB,YAAYF,EAAOhD,EAAUU,SAAUW,KAAK8B,MAAMhB,IACxDT,EAAM0B,WAAWJ,EAAQ,EAAG,KAC5BtB,EAAM2B,aAAa3B,EAAMe,eAAeO,MAAQ,M,8BAI5C9B,GACN,IAAMoC,EAAQC,IAAUC,KAAKtC,EAAMuC,QAC/BH,aAAiBtD,GACnB2B,KAAKD,MAAM2B,aAAaC,EAAMI,OAAO/B,KAAKD,MAAMiC,QAAS,EAAG,U,0CAK9D,IACMnB,EAAYoB,OAAOnB,eACVd,KAAKD,MAAMM,KAAK6B,iBAAhB,UACV7D,EAAUW,QADA,YACWX,EAAUY,YAE7BkD,SAAQ,SAAA1D,GACToC,EAAUuB,aAAa3D,GAAM,GAC/BA,EAAK4D,UAAUC,IAPO,YAStB7D,EAAK4D,UAAUE,OATO,mB,KC7DxBC,EAAS,CACbC,QAAS,CAAC,OAAQ,SAAUpE,EAAUU,UACtC2D,QAAQ,aACNC,QAAS,CAAC,CAAC,OAAQ,YDJU,cCKR,GAEvBC,MAAO,QAoCMC,EAjCA,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACVC,mBAAS,MADC,mBAC/BC,EAD+B,KACvBC,EADuB,KA8BtC,OAAO,yBAAKC,IAVI,SAAAC,GACd,IAAKH,GAAUG,EAAW,CAExBA,EAAUC,UAAYP,EACtB,IAAM/C,EAAQ,IAAIlB,IAAMuE,EAAWZ,GACnCzC,EAAMQ,GAAG,eAAe,kBAnBN,SAAA+C,GACpB,IACMC,GADS,IAAIC,WACAC,gBAAgBH,EAAM,aACzCC,EAAIrB,iBAAiB,UAAUC,SAAQ,SAAAR,GAAU,IAAD,EAG1CA,EADF/C,QAAWJ,EAFiC,EAEjCA,GAAID,EAF6B,EAE7BA,KAEjBoD,EAAM+B,YAAN,YAAuBnF,EAAvB,YAA+BC,EAA/B,UAEFuE,EAASQ,EAAII,KAAKN,WAUcO,CAAc7D,EAAMM,KAAKgD,cACvDH,EAAUnD,KAIY8D,MAAO,CAAEC,OAAQ,Q,MCjC7CjF,IAAMkF,SAAS1F,GACfQ,IAAMkF,SAAN,kBFRiC,cEQcjE,GAoChCkE,MAlCf,WAAgB,IAAD,EACWhB,mBACtB,iFAFW,mBACNM,EADM,KACAW,EADA,KAIb,OACE,yBAAKzF,GAAG,OACN,+BACE,sCACA,wBAAIS,UAAU,cACZ,4BACE,kBAAC,EAAD,CAAOX,MAAM,aAAaC,KAAK,aAAaC,GAAG,SAEjD,4BACE,kBAAC,EAAD,CAAOF,MAAM,YAAYC,KAAK,YAAYC,GAAG,SAE/C,4BACE,kBAAC,EAAD,CAAOF,MAAM,gBAAgBC,KAAK,QAAQC,GAAG,WAInD,iCACE,sCACA,yCACa,wCADb,KACoC,0CADpC,QACiE,IAC/D,0CAFF,iBAIA,kBAAC,EAAD,CAAQsE,MAAOQ,EAAMP,SAAUkB,IAC/B,sCACA,yBAAKzF,GAAG,UAAU8E,MCrC1BY,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFzD,SAAS0D,eAAe,W","file":"static/js/main.62aedcd2.chunk.js","sourcesContent":["import Quill from \"quill\";\n\nconst Embed = Quill.import(\"blots/embed\");\n\nexport default class TokenBlot extends Embed {\n  static blotName = \"placeholder-token\";\n  static tagName = \"span\";\n  static className = \"token\";\n\n  static create({ title, slug, id }) {\n    let node = super.create();\n    node.textContent = title;\n    node.setAttribute(\"contenteditable\", \"false\");\n    node.dataset.title = title;\n    node.dataset.slug = slug;\n    node.dataset.id = id;\n    return node;\n  }\n\n  static value(node) {\n    return node.dataset;\n  }\n\n  length() {\n    return 1;\n  }\n}\n","import React from \"react\";\nimport TokenBlot from \"../quill/TokenBlot\";\n\nconst TAG = TokenBlot.tagName.toLowerCase();\n\nconst Token = ({ title, slug, id }) => {\n  const onDragStart = event => {\n    const text = `{{${slug}|${id}}}`;\n    const json = JSON.stringify({ title, slug, id });\n    event.dataTransfer.setData(\"text/plain\", text);\n    event.dataTransfer.setData(\"application/vnd.placeholder.token\", json);\n  };\n\n  return (\n    <TAG\n      className={TokenBlot.className}\n      draggable=\"true\"\n      onDragStart={onDragStart}\n    >\n      {title}\n    </TAG>\n  );\n};\n\nexport default Token;\n","import Parchment from \"parchment\";\n\nimport TokenBlot from \"./TokenBlot\";\n\nexport const TOKEN_MODULE_NAME = \"token-drop\";\n\nexport default class TokenDrop {\n  constructor(quill) {\n    this.quill = quill;\n    this.onDrop = this.onDrop.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onSelectionChange = this.onSelectionChange.bind(this);\n    this.quill.root.addEventListener(\"drop\", this.onDrop, false);\n    this.quill.root.addEventListener(\"click\", this.onClick, false);\n    this.quill.on(\"selection-change\", this.onSelectionChange);\n  }\n\n  onDrop(event) {\n    const quill = this.quill;\n    const tokenData = event.dataTransfer.getData(\n      \"application/vnd.placeholder.token\"\n    );\n\n    // If the dropped item is a placeholder token AND a Quill instance is initialized:\n    // - Call `preventDefault()` to prevent the token's raw text from being added to the editor.\n    // - Use the Quill API to add a token embed into the editor.\n    if (tokenData && quill) {\n      event.preventDefault();\n\n      // Get the index of the native insertion point.\n      // Drag events do not update Quill's selection so it must be calculated manually.\n      // Cribbed from: https://github.com/kensnyder/quill-image-drop-module\n      if (document.caretRangeFromPoint) {\n        const selection = document.getSelection();\n        const range = document.caretRangeFromPoint(\n          event.clientX,\n          event.clientY\n        );\n        if (selection && range) {\n          selection.setBaseAndExtent(\n            range.startContainer,\n            range.startOffset,\n            range.startContainer,\n            range.startOffset\n          );\n        }\n      }\n      const index = (quill.getSelection() || {}).index || quill.getLength();\n\n      // 1. Insert the placeholder token at the insertion point.\n      // 2. Then insert a space.\n      // 3. Update the insertion point to be after the token and space.\n      quill.insertEmbed(index, TokenBlot.blotName, JSON.parse(tokenData));\n      quill.insertText(index + 1, \" \");\n      quill.setSelection(quill.getSelection().index + 2);\n    }\n  }\n\n  onClick(event) {\n    const token = Parchment.find(event.target);\n    if (token instanceof TokenBlot) {\n      this.quill.setSelection(token.offset(this.quill.scroll), 1, \"user\");\n    }\n  }\n\n  onSelectionChange() {\n    const selectedClassName = \"selected\";\n    const selection = window.getSelection();\n    const tokens = this.quill.root.querySelectorAll(\n      `${TokenBlot.tagName}.${TokenBlot.className}`\n    );\n    tokens.forEach(node => {\n      if (selection.containsNode(node, true)) {\n        node.classList.add(selectedClassName);\n      } else {\n        node.classList.remove(selectedClassName);\n      }\n    });\n  }\n}\n","import React, { useState } from \"react\";\nimport Quill from \"quill\";\nimport TokenBlot from \"../quill/TokenBlot\";\nimport { TOKEN_MODULE_NAME } from \"../quill/TokenDrop\";\n\nconst CONFIG = {\n  formats: [\"bold\", \"italic\", TokenBlot.blotName],\n  modules: {\n    toolbar: [[\"bold\", \"italic\"]],\n    [TOKEN_MODULE_NAME]: true\n  },\n  theme: \"snow\"\n};\n\nconst Editor = ({ value, onChange }) => {\n  const [editor, setEditor] = useState(null);\n\n  // Replace the token nodes with placeholder syntax text.\n  // In a production app this should only be done once when submitting\n  // instead of after every text change.\n  const onValueChange = html => {\n    const parser = new DOMParser();\n    const dom = parser.parseFromString(html, \"text/html\");\n    dom.querySelectorAll(\".token\").forEach(token => {\n      const {\n        dataset: { id, slug }\n      } = token;\n      token.replaceWith(`{{${slug}|${id}}}`);\n    });\n    onChange(dom.body.innerHTML);\n  };\n\n  // When the containing div is mounted, initialize the Quill instance.\n  // Don't mount if an instance already exists!\n  const onMount = container => {\n    if (!editor && container) {\n      // Set the innerHTML once so that Quill is initialized with the starting value.\n      container.innerHTML = value;\n      const quill = new Quill(container, CONFIG);\n      quill.on(\"text-change\", () => onValueChange(quill.root.innerHTML));\n      setEditor(quill);\n    }\n  };\n\n  return <div ref={onMount} style={{ height: 200 }} />;\n};\n\nexport default Editor;\n","import React, { useState } from \"react\";\nimport Token from \"./components/Token\";\nimport Editor from \"./components/Editor\";\n\nimport Quill from \"quill\";\nimport TokenBlot from \"./quill/TokenBlot\";\nimport TokenDrop, { TOKEN_MODULE_NAME } from \"./quill/TokenDrop\";\nimport \"quill/dist/quill.snow.css\";\n\n// Regisger the token embed and the drap-drop module with the Quill library,\n// so that they are available to any Quill instance.\nQuill.register(TokenBlot);\nQuill.register(`modules/${TOKEN_MODULE_NAME}`, TokenDrop);\n\nfunction App() {\n  const [html, setHtml] = useState(\n    \"<p>The <strong>quick brown fox</strong> jumps over the <em>lazy dog</em>.</p>\"\n  );\n  return (\n    <div id=\"app\">\n      <aside>\n        <h1>Tokens</h1>\n        <ul className=\"token-list\">\n          <li>\n            <Token title=\"first name\" slug=\"first_name\" id=\"123\" />\n          </li>\n          <li>\n            <Token title=\"last name\" slug=\"last_name\" id=\"456\" />\n          </li>\n          <li>\n            <Token title=\"email address\" slug=\"email\" id=\"789\" />\n          </li>\n        </ul>\n      </aside>\n      <section>\n        <h1>Editor</h1>\n        <p>\n          Note: only <strong>bold</strong>, <strong>italic</strong>, and{\" \"}\n          <strong>tokens</strong> are enabled.\n        </p>\n        <Editor value={html} onChange={setHtml} />\n        <h1>Output</h1>\n        <div id=\"result\">{html}</div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}