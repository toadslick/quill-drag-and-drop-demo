{"version":3,"sources":["quill/TokenBlot.js","quill/insertToken.js","components/Token.js","quill/TokenDrop.js","components/Editor.js","App.js","index.js"],"names":["TokenBlot","title","slug","id","node","textContent","setAttribute","dataset","Quill","import","blotName","tagName","className","insertToken","quill","tokenData","index","getSelection","getLength","insertEmbed","insertText","setSelection","Token","inputs","useState","menuVisible","setMenuVisible","onClickInput","quillRef","current","ref","addEventListener","event","contains","relatedTarget","draggable","onDragStart","text","json","JSON","stringify","dataTransfer","setData","onClick","type","map","label","key","TokenDrop","this","onDrop","bind","onSelectionChange","root","on","getData","preventDefault","document","caretRangeFromPoint","selection","range","clientX","clientY","setBaseAndExtent","startContainer","startOffset","parse","token","Parchment","find","target","offset","scroll","window","querySelectorAll","forEach","containsNode","classList","add","remove","CONFIG","formats","modules","toolbar","theme","TOKEN_MATCHER","Editor","value","onChange","tokensById","editor","setEditor","onValueChange","html","htmlString","dom","DOMParser","parseFromString","replaceWith","body","innerHTML","htmlToTokens","container","tokenizedString","replace","match","tokensToHtml","style","height","register","TOKENS","App","quillRef1","useRef","quillRef2","html1","setHtml1","html2","setHtml2","tokenProps","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ddf4abd5.chunk.js","sourcesContent":["import Quill from \"quill\";\n\nconst Embed = Quill.import(\"blots/embed\");\n\nexport default class TokenBlot extends Embed {\n  static blotName = \"placeholder-token\";\n  static tagName = \"span\";\n  static className = \"token\";\n\n  static create({ title, slug, id }) {\n    let node = super.create();\n    node.textContent = title;\n    node.setAttribute(\"contenteditable\", \"false\");\n    node.dataset.title = title;\n    node.dataset.slug = slug;\n    node.dataset.id = id;\n    return node;\n  }\n\n  static value(node) {\n    return node.dataset;\n  }\n\n  length() {\n    return 1;\n  }\n}\n","import TokenBlot from \"./TokenBlot\";\n\nconst insertToken = (quill, tokenData) => {\n  let index = (quill.getSelection() || {}).index;\n  index = typeof index === \"number\" ? index : quill.getLength();\n\n  quill.insertEmbed(index, TokenBlot.blotName, tokenData);\n  quill.insertText(index + 1, \" \");\n  quill.setSelection(index + 2);\n};\n\nexport default insertToken;\n","import React, { useState } from \"react\";\n\nimport insertToken from \"../quill/insertToken\";\nimport TokenBlot from \"../quill/TokenBlot\";\n\nconst Token = ({ title, slug, id, inputs }) => {\n  const [menuVisible, setMenuVisible] = useState(false);\n  const tokenData = { title, slug, id };\n  const onDragStart = event => {\n    const text = `{{${slug}|${id}}}`;\n    const json = JSON.stringify({ title, slug, id });\n    event.dataTransfer.setData(\"text/plain\", text);\n    event.dataTransfer.setData(\"application/vnd.placeholder.token\", json);\n  };\n\n  const onClickToken = () => {\n    setMenuVisible(!menuVisible);\n  };\n\n  const onClickInput = quillRef => () => {\n    const quill = quillRef && quillRef.current;\n    if (quill) {\n      insertToken(quill, tokenData);\n    }\n  };\n\n  const onMount = node => {\n    node &&\n      node.addEventListener(\"focusout\", event => {\n        if (!node.contains(event.relatedTarget)) {\n          setMenuVisible(false);\n        }\n      });\n  };\n\n  return (\n    <li ref={onMount}>\n      <button\n        className={TokenBlot.className}\n        draggable=\"true\"\n        onDragStart={onDragStart}\n        onClick={onClickToken}\n        type=\"button\"\n      >\n        {title}\n      </button>\n      {menuVisible && (\n        <ul>\n          {inputs.map(({ label, quillRef }) => (\n            <li key={label}>\n              <button onClick={onClickInput(quillRef)} type=\"button\">\n                {label}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </li>\n  );\n};\n\nexport default Token;\n","import Parchment from \"parchment\";\n\nimport TokenBlot from \"./TokenBlot\";\nimport insertToken from \"./insertToken\";\n\nexport const TOKEN_MODULE_NAME = \"token-drop\";\n\nexport default class TokenDrop {\n  constructor(quill) {\n    this.quill = quill;\n    this.onDrop = this.onDrop.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.onSelectionChange = this.onSelectionChange.bind(this);\n    this.quill.root.addEventListener(\"drop\", this.onDrop, false);\n    this.quill.root.addEventListener(\"click\", this.onClick, false);\n    this.quill.on(\"selection-change\", this.onSelectionChange);\n  }\n\n  onDrop(event) {\n    const quill = this.quill;\n    const tokenData = event.dataTransfer.getData(\n      \"application/vnd.placeholder.token\"\n    );\n\n    // If the dropped item is a placeholder token AND a Quill instance is initialized:\n    // - Call `preventDefault()` to prevent the token's raw text from being added to the editor.\n    // - Use the Quill API to add a token embed into the editor.\n    if (tokenData && quill) {\n      event.preventDefault();\n\n      // Get the index of the native insertion point.\n      // Drag events do not update Quill's selection so it must be calculated manually.\n      // Cribbed from: https://github.com/kensnyder/quill-image-drop-module\n      if (document.caretRangeFromPoint) {\n        const selection = document.getSelection();\n        const range = document.caretRangeFromPoint(\n          event.clientX,\n          event.clientY\n        );\n        if (selection && range) {\n          selection.setBaseAndExtent(\n            range.startContainer,\n            range.startOffset,\n            range.startContainer,\n            range.startOffset\n          );\n        }\n      }\n      insertToken(quill, JSON.parse(tokenData));\n    }\n  }\n\n  onClick(event) {\n    const token = Parchment.find(event.target);\n    if (token instanceof TokenBlot) {\n      this.quill.setSelection(token.offset(this.quill.scroll), 1, \"user\");\n    }\n  }\n\n  onSelectionChange() {\n    const selectedClassName = \"selected\";\n    const selection = window.getSelection();\n    const tokens = this.quill.root.querySelectorAll(\n      `${TokenBlot.tagName}.${TokenBlot.className}`\n    );\n    tokens.forEach(node => {\n      if (selection.containsNode(node, true)) {\n        node.classList.add(selectedClassName);\n      } else {\n        node.classList.remove(selectedClassName);\n      }\n    });\n  }\n}\n","import React, { useState } from \"react\";\nimport Quill from \"quill\";\nimport TokenBlot from \"../quill/TokenBlot\";\nimport { TOKEN_MODULE_NAME } from \"../quill/TokenDrop\";\n\nconst CONFIG = {\n  formats: [\"bold\", \"italic\", TokenBlot.blotName],\n  modules: {\n    toolbar: [[\"bold\", \"italic\"]],\n    [TOKEN_MODULE_NAME]: true\n  },\n  theme: \"snow\"\n};\n\nconst TOKEN_MATCHER = /\\{\\{(\\w*)\\|(\\w*)\\}\\}/gi;\n\n// Replace the token embeds from the Quill output with placeholder syntax.\nconst htmlToTokens = htmlString => {\n  const parser = new DOMParser();\n  const dom = parser.parseFromString(htmlString, \"text/html\");\n  dom.querySelectorAll(`.${TokenBlot.className}`).forEach(token => {\n    const {\n      dataset: { id, slug }\n    } = token;\n    token.replaceWith(`{{${slug}|${id}}}`);\n  });\n  return dom.body.innerHTML;\n};\n\nconst tokensToHtml = (tokenizedString, tokensById) => {\n  return tokenizedString.replace(TOKEN_MATCHER, (match, slug, id) => {\n    const token = tokensById[id];\n    // Ignore matches that aren't for a real token.\n    if (!token) {\n      return match;\n    }\n    const { title } = token;\n    return `<${TokenBlot.tagName} class=\"${TokenBlot.className}\" contenteditable=\"false\" data-title=\"${title}\" data-slug=\"${slug}\" data-id=\"${id}\">${title}</${TokenBlot.tagName}>`;\n  });\n};\n\nconst Editor = ({ value, onChange, quillRef, tokensById }) => {\n  const [editor, setEditor] = useState(null);\n\n  const onValueChange = html => onChange(htmlToTokens(html));\n\n  // When the containing div is mounted, initialize the Quill instance.\n  // Don't mount if an instance already exists!\n  const onMount = container => {\n    if (!editor && container) {\n      // Set the innerHTML once so that Quill is initialized with the starting value.\n      container.innerHTML = tokensToHtml(value, tokensById);\n      const quill = new Quill(container, CONFIG);\n      quill.on(\"text-change\", () => onValueChange(quill.root.innerHTML));\n      setEditor(quill);\n      quillRef.current = quill;\n    }\n  };\n\n  return <div ref={onMount} style={{ height: 200 }} />;\n};\n\nexport default Editor;\n","import React, { useState, useRef } from \"react\";\nimport Token from \"./components/Token\";\nimport Editor from \"./components/Editor\";\n\nimport Quill from \"quill\";\nimport TokenBlot from \"./quill/TokenBlot\";\nimport TokenDrop, { TOKEN_MODULE_NAME } from \"./quill/TokenDrop\";\nimport \"quill/dist/quill.snow.css\";\n\n// Regisger the token embed and the drap-drop module with the Quill library,\n// so that they are available to any Quill instance.\nQuill.register(TokenBlot);\nQuill.register(`modules/${TOKEN_MODULE_NAME}`, TokenDrop);\n\nconst TOKENS = [\n  { title: \"first name\", slug: \"first_name\", id: \"123\" },\n  { title: \"last name\", slug: \"last_name\", id: \"456\" },\n  { title: \"email address\", slug: \"email\", id: \"789\" }\n];\n\nconst tokensById = {};\nTOKENS.forEach(token => {\n  tokensById[token.id] = token;\n});\n\nconst HTML1 =\n  \"<p>The <strong>quick brown fox</strong> jumps over the <em>lazy dog, </em>{{first_name|123}}.</p>\";\nconst HTML2 =\n  \"<p>{{first_name|123}} {{last_name|456}}, sphinx of <strong>black quartz</strong>, judge my <em>vow</em>.</p><p>{{fake_token|999}}</p>\";\n\nfunction App() {\n  const quillRef1 = useRef(null);\n  const quillRef2 = useRef(null);\n\n  const [html1, setHtml1] = useState(HTML1);\n  const [html2, setHtml2] = useState(HTML2);\n\n  const inputs = [\n    { label: \"Section One\", quillRef: quillRef1 },\n    { label: \"Section Two\", quillRef: quillRef2 }\n  ];\n\n  return (\n    <div id=\"app\">\n      <aside>\n        <h1>Tokens</h1>\n        <ul className=\"token-list\">\n          {TOKENS.map(tokenProps => (\n            <Token {...tokenProps} key={tokenProps.id} inputs={inputs} />\n          ))}\n        </ul>\n      </aside>\n      <section>\n        <h1>Editors</h1>\n        <p>\n          Note: only <strong>bold</strong>, <strong>italic</strong>, and{\" \"}\n          <strong>tokens</strong> are enabled.\n        </p>\n        <Editor\n          value={html1}\n          onChange={setHtml1}\n          quillRef={quillRef1}\n          tokensById={tokensById}\n        />\n        <Editor\n          value={html2}\n          onChange={setHtml2}\n          quillRef={quillRef2}\n          tokensById={tokensById}\n        />\n        <h1>Outputs</h1>\n        <div id=\"result\">\n          <p>{html1}</p>\n          <p>{html2}</p>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}